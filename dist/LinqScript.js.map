{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/index.ts","webpack://[name]/./src/lib/Queryable.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA4C;AACrC;AACP,eAAe,wDAAS;AACxB;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA,8BAA8B,4CAA4C;AACnoBAAoB;AACpB,SAAS;AACT;AACA","file":"LinqScript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"LinqScript\"] = factory();\n\telse\n\t\troot[\"LinqScript\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { Queryable } from \"./lib/Queryable\";\r\nexport function Query(source) {\r\n    return new Queryable(source);\r\n}\r\n;\r\n","const NotImplemented = () => { throw new Error(\"Method not implemented.\"); };\r\nexport class Queryable {\r\n    constructor(source) {\r\n        if (typeof (source) == 'function') {\r\n            this.IITer = source;\r\n        }\r\n        else {\r\n            this.IITer = () => {\r\n                const sourceIterator = source[Symbol.iterator]();\r\n                let sourceIndex = 0;\r\n                return {\r\n                    next: () => {\r\n                        let nextItem = sourceIterator.next();\r\n                        nextItem.index = sourceIndex++;\r\n                        return nextItem;\r\n                    }\r\n                };\r\n            };\r\n        }\r\n    }\r\n    static From(source) {\r\n        return new Queryable(source);\r\n    }\r\n    ForEach(callback) {\r\n        const source = this.IITer();\r\n        let result;\r\n        while (!(result = source.next()).done) {\r\n            callback(result.value, result.index);\r\n        }\r\n        ;\r\n    }\r\n    Where(predicate) {\r\n        return this.FromNexter((source) => () => {\r\n            let n;\r\n            let passed = false;\r\n            while (!passed && !(n = source.next()).done) {\r\n                passed = predicate(n.value, n.index);\r\n            }\r\n            ;\r\n            return n;\r\n        });\r\n    }\r\n    Select(selector) {\r\n        return this.FromNexter((source) => () => {\r\n            const n = source.next();\r\n            return {\r\n                value: (n.done ? undefined : selector(n.value, n.index)),\r\n                done: n.done,\r\n                index: n.index\r\n            };\r\n        });\r\n    }\r\n    SelectMany(selector, resultSelector) {\r\n        return this.FromNexter((source) => {\r\n            let outerItem;\r\n            let innerCollection;\r\n            const getNextInnerItem = () => {\r\n                let innerItem;\r\n                if (outerItem === undefined) {\r\n                    outerItem = source.next();\r\n                    if (outerItem.done) {\r\n                        return {\r\n                            value: undefined,\r\n                            done: true,\r\n                            index: outerItem.index\r\n                        };\r\n                    }\r\n                    innerCollection = selector(outerItem.value, outerItem.index)[Symbol.iterator]();\r\n                }\r\n                innerItem = innerCollection.next();\r\n                if (innerItem.done) {\r\n                    outerItem = undefined;\r\n                    innerCollection = undefined;\r\n                    return getNextInnerItem();\r\n                }\r\n                return {\r\n                    value: (resultSelector ? resultSelector(innerItem.value, outerItem.index) : innerItem.value),\r\n                    done: false,\r\n                    index: outerItem.index\r\n                };\r\n            };\r\n            return getNextInnerItem;\r\n        });\r\n    }\r\n    Take(count) {\r\n        return this.FromNexter((source) => {\r\n            let remaining = count;\r\n            let lastIndex = 0;\r\n            return () => {\r\n                if (remaining-- > 0) {\r\n                    const n = source.next();\r\n                    lastIndex = n.index;\r\n                    return n;\r\n                }\r\n                return {\r\n                    done: true,\r\n                    index: lastIndex,\r\n                    value: undefined\r\n                };\r\n            };\r\n        });\r\n    }\r\n    Skip(count) {\r\n        return NotImplemented();\r\n    }\r\n    TakeWhile(predicate) {\r\n        return NotImplemented();\r\n    }\r\n    SkipWhile(predicate) {\r\n        return NotImplemented();\r\n    }\r\n    Join(inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {\r\n        return NotImplemented();\r\n    }\r\n    Concat(other) {\r\n        return NotImplemented();\r\n    }\r\n    Reverse() {\r\n        return NotImplemented();\r\n    }\r\n    GroupBy(keySelector, elementSelector, comparer) {\r\n        return NotImplemented();\r\n    }\r\n    Distinct(comparer) {\r\n        return NotImplemented();\r\n    }\r\n    Union(other, comparer) {\r\n        return NotImplemented();\r\n    }\r\n    Intersect(other, comparer) {\r\n        return NotImplemented();\r\n    }\r\n    Except(other, comparer) {\r\n        return NotImplemented();\r\n    }\r\n    ToArray() {\r\n        const arr = [];\r\n        const source = this.IITer();\r\n        let result;\r\n        while (!(result = source.next()).done) {\r\n            arr.push(result.value);\r\n        }\r\n        ;\r\n        return arr;\r\n    }\r\n    AsIterable() {\r\n        return NotImplemented();\r\n    }\r\n    ToMap(keySelector, elementSelector, comparer) {\r\n        return NotImplemented();\r\n    }\r\n    OfType(type) {\r\n        return NotImplemented();\r\n    }\r\n    Cast() {\r\n        return NotImplemented();\r\n    }\r\n    SequenceEqual(other, comparer) {\r\n        return NotImplemented();\r\n    }\r\n    First(predicate) {\r\n        predicate = predicate || ((element) => true);\r\n        const iiTer = this.IITer();\r\n        let n;\r\n        let passed = false;\r\n        do {\r\n            if (!(n = iiTer.next()).done) {\r\n                passed = predicate(n.value, n.index);\r\n            }\r\n        } while (!passed && !n.done);\r\n        if (n.done) {\r\n            throw new Error(\"InvalidOperationException\");\r\n        }\r\n        return n.value;\r\n    }\r\n    FirstOrDefault(def, predicate) {\r\n        predicate = predicate || ((element) => true);\r\n        const iiTer = this.IITer();\r\n        let n;\r\n        let passed = false;\r\n        do {\r\n            if (!(n = iiTer.next()).done) {\r\n                passed = predicate(n.value, n.index);\r\n            }\r\n        } while (!passed && !n.done);\r\n        return n.done ? def : n.value;\r\n    }\r\n    Any(predicate) {\r\n        predicate = predicate || (() => true);\r\n        const source = this.IITer();\r\n        let n;\r\n        let passed = false;\r\n        while (!passed && !(n = source.next()).done) {\r\n            passed = predicate(n.value, n.index);\r\n        }\r\n        ;\r\n        return passed;\r\n    }\r\n    FromNexter(buildNexter) {\r\n        return new Queryable(() => {\r\n            const internalIterator = this.IITer();\r\n            const nexter = buildNexter(internalIterator);\r\n            return { next: nexter };\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""}