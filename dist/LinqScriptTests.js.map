{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/index.ts","webpack://[name]/./src/lib/IQueryable.ts","webpack://[name]/./src/lib/Query.ts","webpack://[name]/./src/lib/Queryable.ts","webpack://[name]/./src/test/Tests.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAoC;;;;;;;;;;;;;ACApC;AAAA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAwC;AACjC;AACP,eAAe,oDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oDAAS;AAC5B;AACA;AACA,CAAC,sBAAsB;;;;;;;;;;;;;ACjBvB;AAAA;AAAA;AAAgD;AAChD;AACA;AACA,iCAAiC;AACjC;AACA,CAAC;AACD,mCAAmC,4CAA4C;AACxE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,wBAAwB;AACxB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,wBAAwB;AACxB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA+B,4DAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B,4DAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;;;;;;;;;;;;;ACvXA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,oDAAK;AACtC,kCAAkC,oDAAK;AACvC,0BAA0B,oDAAK;AAC/B,2BAA2B,oDAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oDAAK;AAClC;AACA,6BAA6B,oDAAK;AAClC;AACA;AACA;AACA;AACA;AACA,wDAAwD,oDAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACO;AACP;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAA8C;AACnE;AACA;AACA;AACA;AACA;AACA","file":"LinqScriptTests.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"LinqScriptTests\"] = factory();\n\telse\n\t\troot[\"LinqScriptTests\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/test/Tests.ts\");\n","export { Query } from './lib/Query';\r\n",";\r\n;\r\n;\r\nexport class QueryPredicate {\r\n}\r\nQueryPredicate.Always = () => true;\r\nQueryPredicate.Never = () => false;\r\nQueryPredicate.Truethy = (item) => !!item;\r\nQueryPredicate.Falsey = (item) => !item;\r\nexport class EqualityComparer {\r\n}\r\nEqualityComparer.Default = (a, b) => a === b;\r\n","import { Queryable } from \"./Queryable\";\r\nexport function Query(source) {\r\n    return new Queryable(source);\r\n}\r\n(function (Query) {\r\n    function Range(start, count) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Query.Range = Range;\r\n    function Repeat(count) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Query.Repeat = Repeat;\r\n    function Empty() {\r\n        return new Queryable([]);\r\n    }\r\n    Query.Empty = Empty;\r\n})(Query || (Query = {}));\r\n","import { EqualityComparer } from \"./IQueryable\";\r\n;\r\n;\r\nconst AssertArgument = (arg) => { if (arg == null) {\r\n    throw new Error(\"ArgumentUndefinedException\");\r\n} };\r\nconst ThrowNotImplemented = () => { throw new Error(\"Method not implemented.\"); };\r\nexport class Queryable {\r\n    constructor(source) {\r\n        AssertArgument(source);\r\n        if (typeof (source) == 'function') {\r\n            this.IITer = source;\r\n        }\r\n        else {\r\n            this.IITer = () => {\r\n                const sourceIterator = source[Symbol.iterator]();\r\n                let sourceIndex = 0;\r\n                return {\r\n                    next: () => {\r\n                        let nextItem = sourceIterator.next();\r\n                        if (!nextItem.done) {\r\n                            nextItem.index = sourceIndex++;\r\n                        }\r\n                        return nextItem;\r\n                    }\r\n                };\r\n            };\r\n        }\r\n    }\r\n    static FromIterable(source) {\r\n        return new Queryable(source);\r\n    }\r\n    static FromIterator(source) {\r\n        return new Queryable(() => source);\r\n    }\r\n    ForEach(callback) {\r\n        AssertArgument(callback);\r\n        const source = this.IITer();\r\n        for (let result = source.next(); !result.done; result = source.next()) {\r\n            callback(result.value, result.index);\r\n        }\r\n        ;\r\n    }\r\n    SelectManyRecursive(selector) {\r\n        AssertArgument(selector);\r\n        const stack = [];\r\n        const all = [];\r\n        this.SelectMany(selector).Reverse().ForEach(child => {\r\n            stack.push(child);\r\n        });\r\n        while (stack.length > 0) {\r\n            const item = stack.pop();\r\n            all.push(item);\r\n            Queryable.FromIterable(selector(item, -1))\r\n                .Reverse()\r\n                .ForEach(child => {\r\n                stack.push(child);\r\n            });\r\n        }\r\n        return Queryable.FromIterable(all);\r\n    }\r\n    Where(predicate) {\r\n        AssertArgument(predicate);\r\n        return this.FromNexter((source) => () => {\r\n            let n;\r\n            let passed = false;\r\n            while (!passed && !(n = source.next()).done) {\r\n                passed = predicate(n.value, n.index);\r\n            }\r\n            ;\r\n            return n;\r\n        });\r\n    }\r\n    Select(selector) {\r\n        AssertArgument(selector);\r\n        return this.FromNexter((source) => () => {\r\n            const n = source.next();\r\n            return {\r\n                value: (n.done ? undefined : selector(n.value, n.index)),\r\n                done: n.done,\r\n                index: n.index\r\n            };\r\n        });\r\n    }\r\n    SelectMany(selector, resultSelector) {\r\n        AssertArgument(selector);\r\n        return this.FromNexter((source) => {\r\n            let outerResult;\r\n            let innerCollection;\r\n            let innerResult = { done: true, value: undefined };\r\n            let outputIndex = 0;\r\n            return () => {\r\n                do {\r\n                    if (innerResult.done) {\r\n                        if ((outerResult = source.next()).done) {\r\n                            return {\r\n                                value: undefined,\r\n                                done: true,\r\n                                index: outputIndex\r\n                            };\r\n                        }\r\n                        innerCollection = selector(outerResult.value, outerResult.index)[Symbol.iterator]();\r\n                    }\r\n                } while ((innerResult = innerCollection.next()).done);\r\n                ++outputIndex;\r\n                return {\r\n                    value: (resultSelector ? resultSelector(innerResult.value, outputIndex) : innerResult.value),\r\n                    done: false,\r\n                    index: outputIndex\r\n                };\r\n            };\r\n        });\r\n    }\r\n    Take(count) {\r\n        AssertArgument(count);\r\n        return this.FromNexter((source) => {\r\n            let remaining = count;\r\n            let lastIndex = -1;\r\n            return () => {\r\n                if (remaining-- > 0) {\r\n                    const n = source.next();\r\n                    lastIndex = n.index;\r\n                    if (n.done) {\r\n                        remaining = 0;\r\n                    }\r\n                    return n;\r\n                }\r\n                return {\r\n                    done: true,\r\n                    index: lastIndex,\r\n                    value: undefined\r\n                };\r\n            };\r\n        });\r\n    }\r\n    Skip(count) {\r\n        AssertArgument(count);\r\n        return this.FromNexter((source) => {\r\n            let remaining = count;\r\n            return () => {\r\n                for (; remaining > 0; --remaining) {\r\n                    source.next();\r\n                }\r\n                ;\r\n                return source.next();\r\n            };\r\n        });\r\n    }\r\n    TakeWhile(predicate) {\r\n        AssertArgument(predicate);\r\n        return this.FromNexter((source) => {\r\n            let passed = true;\r\n            let lastIndex = -1;\r\n            return () => {\r\n                if (passed) {\r\n                    const n = source.next();\r\n                    passed = !n.done && predicate(n.value, n.index);\r\n                    if (passed) {\r\n                        return n;\r\n                    }\r\n                }\r\n                return {\r\n                    done: true,\r\n                    index: lastIndex,\r\n                    value: undefined\r\n                };\r\n            };\r\n        });\r\n    }\r\n    SkipWhile(predicate) {\r\n        AssertArgument(predicate);\r\n        return this.FromNexter((source) => {\r\n            let skipped = false;\r\n            return () => {\r\n                let n;\r\n                do {\r\n                    n = source.next();\r\n                } while (!skipped && !n.done && predicate(n.value, n.index));\r\n                skipped = true;\r\n                return n;\r\n            };\r\n        });\r\n    }\r\n    Join(inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {\r\n        return ThrowNotImplemented();\r\n    }\r\n    Concat(other) {\r\n        AssertArgument(other);\r\n        return this.FromNexter((source) => {\r\n            const otherIter = other[Symbol.iterator]();\r\n            let concatIndex = -1;\r\n            let sourceHas = true;\r\n            let otherHas = true;\r\n            return () => {\r\n                let n;\r\n                if (sourceHas) {\r\n                    n = source.next();\r\n                    sourceHas = !n.done;\r\n                }\r\n                if (!sourceHas && otherHas) {\r\n                    n = otherIter.next();\r\n                    otherHas = !n.done;\r\n                }\r\n                if (sourceHas || otherHas) {\r\n                    return { done: false, index: concatIndex++, value: n.value };\r\n                }\r\n                return { done: true, index: concatIndex, value: undefined };\r\n            };\r\n        });\r\n    }\r\n    Reverse() {\r\n        return this.FromNexter((source) => {\r\n            let elems = Queryable.FromIterator(source).ToArray();\r\n            const mxi = elems.length;\r\n            let idx = 0;\r\n            return () => {\r\n                if (idx < mxi) {\r\n                    idx++;\r\n                    return { done: false, index: idx, value: elems[mxi - idx] };\r\n                }\r\n                return { done: true, index: idx, value: undefined };\r\n            };\r\n        });\r\n    }\r\n    GroupBy(keySelector, elementSelector, comparer) {\r\n        return ThrowNotImplemented();\r\n    }\r\n    Distinct(comparer) {\r\n        comparer = comparer || EqualityComparer.Default;\r\n        return new Queryable(() => {\r\n            const distinctValues = [];\r\n            const collapsedQuery = (new Queryable(this.ToArray()));\r\n            const collapsedIter = collapsedQuery.IITer();\r\n            let n = collapsedIter.next();\r\n            for (; !n.done; n = collapsedIter.next()) {\r\n                const hasDupe = collapsedQuery\r\n                    .TakeWhile((v, idx) => idx < n.index)\r\n                    .Any((v, idx) => comparer(n.value, v));\r\n                if (!hasDupe) {\r\n                    distinctValues.push(n.value);\r\n                }\r\n            }\r\n            ;\r\n            return (new Queryable(distinctValues)).IITer();\r\n        });\r\n    }\r\n    Union(other, comparer) {\r\n        AssertArgument(other);\r\n        comparer = comparer || EqualityComparer.Default;\r\n        const seen = [];\r\n        const seenQuery = Queryable.FromIterable(seen);\r\n        return this.Concat(other).Where((vCat) => {\r\n            const dupe = seenQuery.Any((vSeen) => comparer(vSeen, vCat));\r\n            if (!dupe) {\r\n                seen.push(vCat);\r\n            }\r\n            return !dupe;\r\n        });\r\n    }\r\n    Intersect(other, comparer) {\r\n        return ThrowNotImplemented();\r\n    }\r\n    Except(other, comparer) {\r\n        return ThrowNotImplemented();\r\n    }\r\n    ToArray() {\r\n        const arr = [];\r\n        const source = this.IITer();\r\n        for (let result = source.next(); !result.done; result = source.next()) {\r\n            arr.push(result.value);\r\n        }\r\n        ;\r\n        return arr;\r\n    }\r\n    AsIterable() {\r\n        return { [Symbol.iterator]: () => this.IITer() };\r\n    }\r\n    ToMap(keySelector, elementSelector, comparer) {\r\n        return ThrowNotImplemented();\r\n    }\r\n    OfType(type) {\r\n        return ThrowNotImplemented();\r\n    }\r\n    Cast() {\r\n        return ThrowNotImplemented();\r\n    }\r\n    SequenceEqual(other, comparer) {\r\n        return ThrowNotImplemented();\r\n    }\r\n    First(predicate) {\r\n        predicate = predicate || ((element) => true);\r\n        const iiTer = this.IITer();\r\n        let n = iiTer.next();\r\n        for (; !n.done; n = iiTer.next()) {\r\n            if (predicate(n.value, n.index)) {\r\n                return n.value;\r\n            }\r\n        }\r\n        throw new Error(\"InvalidOperationException\");\r\n    }\r\n    FirstOrDefault(def, predicate) {\r\n        predicate = predicate || ((element) => true);\r\n        const iiTer = this.IITer();\r\n        let n;\r\n        let passed = false;\r\n        do {\r\n            if (!(n = iiTer.next()).done) {\r\n                passed = predicate(n.value, n.index);\r\n            }\r\n        } while (!passed && !n.done);\r\n        return n.done ? def : n.value;\r\n    }\r\n    Last(predicate) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    LastOrDefault(def, predicate) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Single(predicate) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    SingleOrDefault(def, predicate) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    ElementAt(index) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    ElementAtOrDefault(index, def) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    DefaultIfEmpty(def) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Any(predicate) {\r\n        predicate = predicate || (() => true);\r\n        const source = this.IITer();\r\n        let n;\r\n        let passed = false;\r\n        while (!passed && !(n = source.next()).done) {\r\n            passed = predicate(n.value, n.index);\r\n        }\r\n        ;\r\n        return passed;\r\n    }\r\n    All(predicate) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Contains(value, comparer) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Count(predicate) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Sum(selector) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Min(selector) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Max(selector) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Average(selector) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    Aggregate(func, seed, selector) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    FromNexter(buildNexter) {\r\n        return new Queryable(() => {\r\n            const internalIterator = this.IITer();\r\n            const nexter = buildNexter(internalIterator);\r\n            return { next: nexter };\r\n        });\r\n    }\r\n}\r\n","import { Query } from '../index';\r\nclass LinqscriptTests {\r\n    constructor() {\r\n        this.SimpleNumberArray = [1, 2, 3, 4];\r\n        this.ComplexNumberArray = [1, 4, 8, 10, 10, 16, 54, 82, 82, 99];\r\n        this.OwnerArray = [\r\n            {\r\n                Name: 'Bob',\r\n                Age: 34,\r\n                Registered: false,\r\n                Pets: []\r\n            },\r\n            {\r\n                Name: 'Alice',\r\n                Age: 27,\r\n                Registered: false,\r\n                Pets: ['Fluffy', 'Kitty', 'Gus']\r\n            },\r\n            {\r\n                Name: 'Mike',\r\n                Age: 59,\r\n                Registered: true,\r\n                Pets: ['Terror', 'Butch']\r\n            },\r\n            {\r\n                Name: 'Cindy',\r\n                Age: 8,\r\n                Registered: false,\r\n                Pets: ['Mr. Squawks']\r\n            },\r\n            {\r\n                Name: 'Mark',\r\n                Age: 44,\r\n                Registered: true,\r\n                Pets: []\r\n            },\r\n            {\r\n                Name: 'Nancy',\r\n                Age: 90,\r\n                Registered: true,\r\n                Pets: ['Tort']\r\n            },\r\n        ];\r\n        this.PersonArray = [];\r\n        this.CreatePerson('Bob', this.CreatePerson('Sally', this.CreatePerson('Jeff', this.CreatePerson('Heather'))), this.CreatePerson('Mark'));\r\n        this.CreatePerson('Alice', this.CreatePerson('June', this.CreatePerson('Rigney', this.CreatePerson('Alice'))), this.CreatePerson('Steve'));\r\n        this.SimpleNumberQuery = Query(this.SimpleNumberArray);\r\n        this.ComplexNumberQuery = Query(this.ComplexNumberArray);\r\n        this.OwnerQuery = Query(this.OwnerArray);\r\n        this.PersonQuery = Query(this.PersonArray);\r\n        this.OutputElement = document.getElementById(\"TestResults\");\r\n    }\r\n    RunSuite() {\r\n        this.Log('=== Testing Failure Modes ==');\r\n        this.ReportTest('ReportTest Fail', false, 'This test should fail');\r\n        this.ExecuteMatchTest('MatchTest Fail Length', this.SimpleNumberQuery, []);\r\n        this.ExecuteMatchTest('MatchTest Fail Values', this.SimpleNumberQuery, [2, 3, 4, 5]);\r\n        this.Log('=== End Testing Failure Modes ==');\r\n        this.ReportTest('ReportTest Pass', true, null);\r\n        this.OperationalTests();\r\n        this.SelectTests();\r\n        this.WhereTests();\r\n        this.PartitioningTests();\r\n        this.ConcatenationTest();\r\n        this.OrderingTests();\r\n        this.SetTests();\r\n        this.ChainTests();\r\n    }\r\n    OperationalTests() {\r\n        this.ExecuteMatchTest('ToArray', this.SimpleNumberQuery, [1, 2, 3, 4]);\r\n        this.ReportTest('Any', this.SimpleNumberQuery.Any(), null);\r\n        this.ReportTest('Any Owner is 27', this.OwnerQuery.Any(o => o.Age == 27), null);\r\n    }\r\n    SelectTests() {\r\n        this.ExecuteMatchTest('Select Number', this.SimpleNumberQuery.Select((item, index) => item + index), [1, 3, 5, 7]);\r\n        this.ExecuteMatchTest('Select First Pet', this.OwnerQuery.Select((owner) => owner.Pets.length > 0 ? owner.Pets[0] : null), [null, 'Fluffy', 'Terror', 'Mr. Squawks', null, 'Tort']);\r\n        this.ExecuteMatchTest('SelectMany All Pets', this.OwnerQuery.SelectMany(owner => owner.Pets), ['Fluffy', 'Kitty', 'Gus', 'Terror', 'Butch', 'Mr. Squawks', 'Tort']);\r\n        this.ExecuteMatchTest('SelectMany All Pets, Select First letter', this.OwnerQuery.SelectMany(owner => owner.Pets, pname => pname[0]), ['F', 'K', 'G', 'T', 'B', 'M', 'T']);\r\n    }\r\n    WhereTests() {\r\n        this.ExecuteMatchTest('Where Number', this.SimpleNumberQuery.Where((item, index) => item === 4 || index === 0), [1, 4]);\r\n        this.ExecuteMatchTest('Where Object', this.OwnerQuery.Where((owner) => owner.Age > 30), [this.OwnerArray[0], this.OwnerArray[2], this.OwnerArray[4], this.OwnerArray[5]]);\r\n    }\r\n    ChainTests() {\r\n        const persons = this.PersonQuery.Select(p => p);\r\n        const parents = persons\r\n            .Where(person => person.Children.length > 0);\r\n        const grandParents = parents\r\n            .Where(person => Query(person.Children).Any(child => child.Children.length > 0));\r\n        const greatGrandParents = grandParents\r\n            .Where(person => Query(person.Children)\r\n            .SelectMany(child => child.Children)\r\n            .Any(grandChild => grandChild.Children.length > 0));\r\n        const children = parents.SelectMany(p => p.Children);\r\n        const grandChildren = children.SelectMany(c => c.Children);\r\n        const greatGrandChildren = grandChildren.SelectMany(gc => gc.Children);\r\n        const nameLegacy = greatGrandParents.Where(p => Query(p.Children).SelectMany(child => child.Children).SelectMany(grandchild => grandchild.Children).Any(ggc => ggc.Name === p.Name));\r\n        this.ExecuteMatchTest('Chain: Parents', parents.Select(p => p.Name), ['Jeff', 'Sally', 'Bob', 'Rigney', 'June', 'Alice']);\r\n        this.ExecuteMatchTest('Chain: Grandparents', grandParents.Select(p => p.Name), ['Sally', 'Bob', 'June', 'Alice']);\r\n        this.ExecuteMatchTest('Chain: Great Grandparents', greatGrandParents.Select(p => p.Name), ['Bob', 'Alice']);\r\n        this.ExecuteMatchTest('Chain: Children', children.Select(p => p.Name), ['Heather', 'Jeff', 'Sally', 'Mark', 'Alice', 'Rigney', 'June', 'Steve']);\r\n        this.ExecuteMatchTest('Chain: Grandchildren', grandChildren.Select(p => p.Name), ['Heather', 'Jeff', 'Alice', 'Rigney']);\r\n        this.ExecuteMatchTest('Chain: Great Grandchildren', greatGrandChildren.Select(p => p.Name), ['Heather', 'Alice']);\r\n        this.ExecuteMatchTest('Chain: Great-Grandchild Name Match', nameLegacy.Select(p => p.Name), ['Alice']);\r\n    }\r\n    PartitioningTests() {\r\n        this.ExecuteMatchTest('Skip', this.SimpleNumberQuery.Skip(2), [3, 4]);\r\n        this.ExecuteMatchTest('Take', this.SimpleNumberQuery.Take(2), [1, 2]);\r\n        this.ExecuteMatchTest('Skip-Take', this.SimpleNumberQuery.Skip(1).Take(2), [2, 3]);\r\n        this.ExecuteMatchTest('TakeWhile', this.OwnerQuery.TakeWhile((v) => v.Age > 10), [this.OwnerArray[0], this.OwnerArray[1], this.OwnerArray[2]]);\r\n        this.ExecuteMatchTest('SkipWhile', this.OwnerQuery.SkipWhile((v) => v.Age > 10), [this.OwnerArray[3], this.OwnerArray[4], this.OwnerArray[5]]);\r\n    }\r\n    ConcatenationTest() {\r\n        this.ExecuteMatchTest('Concat', this.SimpleNumberQuery.Concat([5, 6]), [1, 2, 3, 4, 5, 6]);\r\n    }\r\n    OrderingTests() {\r\n        this.ExecuteMatchTest('Reverse', this.SimpleNumberQuery.Reverse(), [4, 3, 2, 1]);\r\n    }\r\n    SetTests() {\r\n        this.ExecuteMatchTest('Distinct (default)', this.ComplexNumberQuery.Distinct(), [1, 4, 8, 10, 16, 54, 82, 99]);\r\n        this.ExecuteMatchTest('Distinct (The only number in its 10\\'s group)', this.ComplexNumberQuery.Distinct((a, b) => Math.floor(a / 10.0) === Math.floor(b / 10.0)), [1, 10, 54, 82, 99]);\r\n        this.ExecuteMatchTest('Union', this.SimpleNumberQuery.Union(this.ComplexNumberQuery.AsIterable()), [1, 2, 3, 4, 8, 10, 16, 54, 82, 99]);\r\n    }\r\n    Log(msg, data) {\r\n        this.OutputElement.innerText = this.OutputElement.innerText + '\\r\\n' + msg + (data ? ' :: ' + String(data) : '');\r\n        if (data) {\r\n            console.log(msg, data);\r\n        }\r\n        else {\r\n            console.log(msg);\r\n        }\r\n    }\r\n    ExecuteMatchTest(name, query, test) {\r\n        let passed = true;\r\n        const arr = query.ToArray();\r\n        try {\r\n            if (Array.isArray(test)) {\r\n                passed = arr.length === test.length;\r\n                for (let i = 0; i < test.length && passed; ++i) {\r\n                    passed = arr[i] === test[i];\r\n                }\r\n            }\r\n            else {\r\n                passed = test(arr);\r\n            }\r\n        }\r\n        catch (_a) {\r\n            passed = false;\r\n        }\r\n        this.ReportTest(name, passed, arr);\r\n    }\r\n    ReportTest(name, passed, relevantData) {\r\n        if (!passed) {\r\n            this.Log('[FAIL] ' + name, relevantData);\r\n        }\r\n        else {\r\n            this.Log('[PASS] ' + name);\r\n        }\r\n    }\r\n    CreatePerson(name, ...children) {\r\n        const p = { Name: name, Children: children };\r\n        this.PersonArray.push(p);\r\n        return p;\r\n    }\r\n}\r\nexport function Run() {\r\n    (new LinqscriptTests()).RunSuite();\r\n    window.Query = Query;\r\n    const example1 = `Query([4,10,34,100]).Select(a=>a*2).ToArray()`;\r\n    const example2 = `Query(document.getElementsByTagName('head')).Take(1).SelectMany(head=>head.children).Where(elm=>elm instanceof HTMLScriptElement).Select(script=>script.src.replace('file:///','')).ToArray()`;\r\n    console.info('');\r\n    console.info('Query exposed to global scope. Example usage:');\r\n    console.info(example1, eval(example1));\r\n    console.info('Or, get script sources from <head>');\r\n    console.info(example2, eval(example2));\r\n    const example3 = `\r\n  // Get the root node\r\n  Query([document.getRootNode()])\r\n  // Select all decendants\r\n  .SelectManyRecursive(i => i.children)\r\n  // Select all style properties\r\n  .SelectMany(elm =>\r\n    Query(Object.keys(elm.style))\r\n    // Ignore numeric keys\r\n    .Where(key => isNaN(Number(key)))\r\n    // Ignore empty values\r\n    .Where(key => elm.style[key] != '')\r\n    .Select(key => ({ Tag: elm, Style: key, Value: elm.style[key] }))\r\n    .AsIterable()\r\n  ).ToArray();\r\n  `;\r\n    console.log(example3, eval(example3));\r\n}\r\n;\r\n"],"sourceRoot":""}